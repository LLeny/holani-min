use macroquad::input::KeyCode;

pub fn translate_keycode(keycode: &str) -> KeyCode {
    // same as GLFW
    match keycode {
        "0" => KeyCode::Key0,
        "1" => KeyCode::Key1,
        "2" => KeyCode::Key2,
        "3" => KeyCode::Key3,
        "4" => KeyCode::Key4,
        "5" => KeyCode::Key5,
        "6" => KeyCode::Key6,
        "7" => KeyCode::Key7,
        "8" => KeyCode::Key8,
        "9" => KeyCode::Key9,
        "a" => KeyCode::A,
        "b" => KeyCode::B,
        "c" => KeyCode::C,
        "d" => KeyCode::D,
        "e" => KeyCode::E,
        "f" => KeyCode::F,
        "g" => KeyCode::G,
        "h" => KeyCode::H,
        "i" => KeyCode::I,
        "j" => KeyCode::J,
        "k" => KeyCode::K,
        "l" => KeyCode::L,
        "m" => KeyCode::M,
        "n" => KeyCode::N,
        "o" => KeyCode::O,
        "p" => KeyCode::P,
        "q" => KeyCode::Q,
        "r" => KeyCode::R,
        "s" => KeyCode::S,
        "t" => KeyCode::T,
        "u" => KeyCode::U,
        "v" => KeyCode::V,
        "w" => KeyCode::W,
        "x" => KeyCode::X,
        "y" => KeyCode::Y,
        "z" => KeyCode::Z,
        "\'" => KeyCode::Apostrophe,
        "\\" => KeyCode::Backslash,
        "," => KeyCode::Comma,
        "=" => KeyCode::Equal,
        "[" => KeyCode::LeftBracket,
        "-" => KeyCode::Minus,
        "." => KeyCode::Period,
        "]" => KeyCode::RightBracket,
        ";" => KeyCode::Semicolon,
        "/" => KeyCode::Slash,
        "up" => KeyCode::Up,
        "down" => KeyCode::Down,
        "left" => KeyCode::Left,
        "right" => KeyCode::Right,
        _ => KeyCode::Unknown,
    }
}